generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  firstName    String
  lastName     String
  phoneNumber  String?
  createdAt    DateTime @default(now())
  dni          String?
  photoUrl     String?
  googleId     String?  @unique

  player Player?
}

model Match {
  id              String   @id @default(uuid())
  dateTime        DateTime
  location        String
  category        String
  pointsDeviation Int
  statusId        String
  createdAt       DateTime @default(now())
  creatorPlayerId String
  creator         Player   @relation("creatorMatch", fields: [creatorPlayerId], references: [id])
  gender          String

  status      MatchStatus   @relation(fields: [statusId], references: [id])
  players     Player[]      @relation("matchPlayers")
  teams       Team[]
  sets        Set[]
  application Application[]
}

model Player {
  id            String  @id @default(uuid())
  firstName     String?
  lastName      String?
  level         String?
  rankingPoints Int?
  phone         String? @unique
  gender        String

  teams   Team[]
  matches Match[] @relation("matchPlayers") // Relaci√≥n inversa para los jugadores
  userId  String? @unique
  user    User?   @relation(fields: [userId], references: [id])

  match       Match[]       @relation("creatorMatch")
  application Application[]
}

model Team {
  id         String   @id @default(uuid())
  matchId    String
  match      Match    @relation(fields: [matchId], references: [id])
  players    Player[]
  teamNumber Int
}

model MatchStatus {
  id          String @id @default(uuid())
  name        String @unique
  description String

  match Match[]
}

model Set {
  id         String @id @default(uuid())
  matchId    String
  match      Match  @relation(fields: [matchId], references: [id])
  setNumber  Int
  team1Score Int
  team2Score Int
}

model Application {
  id         String            @id @default(uuid())
  matchId    String
  playerId   String
  teamNumber Int
  message    String?
  phone      String?
  status     ApplicationStatus @default(PENDING)
  reason     String?
  createdAt  DateTime          @default(now())

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
