generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  firstName    String
  lastName     String
  phoneNumber  String?
  createdAt    DateTime @default(now())
  dni          String?
  photoUrl     String?
  googleId     String?  @unique

  player Player?
}

model Match {
  id              String   @id @default(uuid())
  dateTime        DateTime
  location        String
  description     String?
  category        String
  pointsDeviation Int?
  statusId        String
  createdAt       DateTime @default(now())
  creatorPlayerId String
  genderId        String
  duration        Int

  creator      Player        @relation("creatorMatch", fields: [creatorPlayerId], references: [id])
  gender       Gender        @relation(fields: [genderId], references: [id])
  status       MatchStatus   @relation(fields: [statusId], references: [id])
  players      Player[]      @relation("matchPlayers")
  teams        Team[]
  sets         Set[]
  applications Application[]
}

model Player {
  id            String  @id @default(uuid())
  firstName     String?
  lastName      String?
  categoryId    String?
  rankingPoints Int?
  phone         String?
  userId        String? @unique
  genderId      String?
  positionId    String?

  position       PlayerPosition? @relation(fields: [positionId], references: [id])
  teams          Team[]
  matches        Match[]         @relation("matchPlayers")
  gender         Gender?         @relation(fields: [genderId], references: [id])
  user           User?           @relation(fields: [userId], references: [id])
  matchesCreated Match[]         @relation("creatorMatch")
  applications   Application[]
  category       Category?       @relation(fields: [categoryId], references: [id])
}

model Team {
  id         String @id @default(uuid())
  matchId    String
  teamNumber Int

  match   Match    @relation(fields: [matchId], references: [id])
  players Player[]

  @@unique([matchId, teamNumber])
}

model MatchStatus {
  id          String @id @default(uuid())
  name        String @unique
  description String

  matches Match[]
}

model Set {
  id         String @id @default(uuid())
  matchId    String
  setNumber  Int
  team1Score Int
  team2Score Int

  match Match @relation(fields: [matchId], references: [id])
}

model Application {
  id         String   @id @default(uuid())
  matchId    String
  playerId   String
  teamNumber Int
  message    String?
  phone      String?
  reason     String?
  createdAt  DateTime @default(now())

  status ApplicationStatus @default(PENDING)
  match  Match             @relation(fields: [matchId], references: [id])
  player Player            @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

model Gender {
  id         String @id @default(uuid())
  code       String @unique
  name       String
  pluralName String

  matches    Match[]
  players    Player[]
  categories Category[]
}

model Category {
  id            String @id @default(uuid())
  code          String @unique
  description   String
  genderId      String
  initialPoints Int

  gender  Gender   @relation(fields: [genderId], references: [id])
  players Player[]
}

model PlayerPosition {
  id          String @id @default(uuid())
  code        String @unique
  description String

  players Player[]
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
